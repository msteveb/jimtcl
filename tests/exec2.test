# These tests are design especially for the vfork() implementation
# of exec where sh -c must be used and thus we must take extra care
# in quoting arguments to exec.

source [file dirname [info script]]/testing.tcl

needs cmd exec

set d \"
set s '
set b \\

array set saveenv [array get env]

# Windows does not have these Linux utilities: printenv, sed and echo is not an executable file
testConstraint posixUtilsAvailable [expr ! ( [catch { exec echo } fid] || [catch { exec printenv --help} fid] || [catch { exec sed --help} fid] ) ]

test exec2-1.1 "Quoting - Result" -constraints {posixUtilsAvailable} -body  {
	exec echo ${d}double quoted${d} ${s}single quoted${s} ${b}backslash quoted${b}
} -result "\"double\ quoted\"\ 'single quoted'\ \\backslash\ quoted\\"

test exec2-1.2 "Quoting - Word Grouping" -constraints {posixUtilsAvailable} -body  {
	string trim [exec echo ${d}double quoted${d} ${s}single quoted${s} ${b}backslash quoted${b} | wc -w]
} -result {6}

test exec2-2.1 "Add to exec environment" -constraints {posixUtilsAvailable} -body {
	set env(TESTENV) "the value"
	exec printenv | sed -n -e /^TESTENV=/p
} -result {TESTENV=the value}

test exec2-2.2 "Remove from exec environment" -constraints {posixUtilsAvailable} -body {
	set env(TESTENV2) "new value"
	unset env(TESTENV)
	exec printenv | sed -n -e /^TESTENV=/p
} -result {}


test exec2-2.3 "Remove all exec environment" -constraints {posixUtilsAvailable} -body {
	array unset env *
	exec printenv | sed -n -e /^TESTENV2=/p
} -result {}

test exec2-2.4 "Remove all env var" -constraints {posixUtilsAvailable} -body {
	unset -nocomplain env
	exec printenv | sed -n -e /^TESTENV2=/p
} -result {}

array set env [array get saveenv]

testreport
